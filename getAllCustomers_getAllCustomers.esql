CREATE COMPUTE MODULE getAllCustomers_getAllCustomers
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE numberOfRows, counter, maxRowsToReturn, startingRowNumber, rowToAdd INTEGER;
		DECLARE odbcCMD CHARACTER;
		
		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
		-- use PASSTHRU since we want the data to be sorted. ESQL doesn't support the order by clause.
		
		SET odbcCMD = 'SELECT d.id,	d.surname, d.firstName, d.initial, d.rating FROM ' || dbSchema || '.CUSTOMERS as d ORDER BY d.id';
		
		SET Environment.Variables.Data[] = PASSTHRU(odbcCMD);
		
		CREATE FIELD OutputRoot.JSON.Data IDENTITY(JSON.Array)Data;
		
		SET numberOfRows = CARDINALITY(Environment.Variables.Data[]);
		
		SET maxRowsToReturn = COALESCE(CAST(InputLocalEnvironment.HTTP.Input.QueryString.max AS INTEGER), numberOfRows);
		
		SET startingRowNumber = COALESCE(CAST(InputLocalEnvironment.HTTP.Input.QueryString.start AS INTEGER), 1);
		
		IF startingRowNumber = 0 THEN
			SET startingRowNumber = 1;
		END IF;
		
		IF startingRowNumber > numberOfRows THEN
			SET startingRowNumber = 1;
		END IF;
		 
		
		SET counter = startingRowNumber;
		
		SET rowToAdd = 1;
		
		WHILE (counter <= numberOfRows) DO
		
			SET OutputRoot.JSON.Data.Item[rowToAdd].id = Environment.Variables.Data[counter].id;
			SET OutputRoot.JSON.Data.Item[rowToAdd].surname = Environment.Variables.Data[counter].surname;
			SET OutputRoot.JSON.Data.Item[rowToAdd].firstName = Environment.Variables.Data[counter].firstName;
			SET OutputRoot.JSON.Data.Item[rowToAdd].initial = Environment.Variables.Data[counter].initial;
			SET OutputRoot.JSON.Data.Item[rowToAdd].rating = Environment.Variables.Data[counter].rating;
		
			SET rowToAdd = rowToAdd + 1;
		
			SET counter = counter + 1;
			
			IF counter >= startingRowNumber + maxRowsToReturn  THEN
				SET counter = numberOfRows + 1;
			END IF;
		
		END WHILE;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

